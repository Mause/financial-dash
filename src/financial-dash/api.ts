/* tslint:disable */
/* eslint-disable */
/**
 * Financial Dash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface CreateInvoiceRequest
 */
export interface CreateInvoiceRequest {
  /**
   *
   * @type {string}
   * @memberof CreateInvoiceRequest
   */
  clientId: string;
  /**
   *
   * @type {number}
   * @memberof CreateInvoiceRequest
   */
  amount: number;
}
/**
 *
 * @export
 * @interface CreateInvoiceResponse
 */
export interface CreateInvoiceResponse {
  /**
   *
   * @type {CreateInvoiceResponseData}
   * @memberof CreateInvoiceResponse
   */
  data: CreateInvoiceResponseData;
}
/**
 *
 * @export
 * @interface CreateInvoiceResponseData
 */
export interface CreateInvoiceResponseData {
  /**
   *
   * @type {string}
   * @memberof CreateInvoiceResponseData
   */
  id: string;
}

/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateInvoiceRequest} createInvoiceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoice: async (
      createInvoiceRequest: CreateInvoiceRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createInvoiceRequest' is not null or undefined
      assertParamExists(
        "createInvoice",
        "createInvoiceRequest",
        createInvoiceRequest
      );
      const localVarPath = `/api/invoice`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Jwt required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createInvoiceRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateInvoiceRequest} createInvoiceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createInvoice(
      createInvoiceRequest: CreateInvoiceRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateInvoiceResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createInvoice(
        createInvoiceRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InvoiceApiFp(configuration);
  return {
    /**
     *
     * @param {CreateInvoiceRequest} createInvoiceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoice(
      createInvoiceRequest: CreateInvoiceRequest,
      options?: any
    ): AxiosPromise<CreateInvoiceResponse> {
      return localVarFp
        .createInvoice(createInvoiceRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export class InvoiceApi extends BaseAPI {
  /**
   *
   * @param {CreateInvoiceRequest} createInvoiceRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvoiceApi
   */
  public createInvoice(
    createInvoiceRequest: CreateInvoiceRequest,
    options?: any
  ) {
    return InvoiceApiFp(this.configuration)
      .createInvoice(createInvoiceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
