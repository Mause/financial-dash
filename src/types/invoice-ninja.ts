/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/signup": {
    /** Attempts a new account signup and returns a CompanyUser object on success */
    post: operations["postSignup"];
  };
  "/api/v1/actvities": {
    /** Lists all activities */
    get: operations["getActivities"];
  };
  "/api/v1/actvities/download_entity/{activity_id}": {
    /** Gets a PDF for the given activity */
    get: operations["getActivityHistoricalEntityPdf"];
  };
  "/api/v1/login": {
    /** Returns a CompanyUser object on success */
    post: operations["postLogin"];
  };
  "/api/v1/refresh": {
    /** Refreshes the dataset */
    post: operations["refresh"];
  };
  "/api/v1/clients": {
    /**
     * Lists clients, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the clients, these are handled by the ClientFilters class which defines the methods available
     */
    get: operations["getClients"];
    /** Adds an client to a company */
    post: operations["storeClient"];
  };
  "/api/v1/clients/{id}": {
    /** Displays a client by id */
    get: operations["showClient"];
    /** Handles the updating of a client by id */
    put: operations["updateClient"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteClient"];
  };
  "/api/v1/clients/{id}/edit": {
    /** Displays a client by id */
    get: operations["editClient"];
  };
  "/api/v1/clients/create": {
    /** Returns a blank object with default values */
    get: operations["getClientsCreate"];
  };
  "/api/v1/clients/bulk": {
    post: operations["bulkClients"];
  };
  "/api/v1/clients/{id}/upload": {
    /** Handles the uploading of a document to a client */
    put: operations["uploadClient"];
  };
  "/api/v1/client_gateway_tokens": {
    /**
     * Lists client_gateway_tokens, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the client_gateway_tokens, these are handled by the ClientGatewayTokenFilters class which defines the methods available
     */
    get: operations["getClientGatewayTokens"];
    /** Adds an client to a company */
    post: operations["storeClientGatewayToken"];
  };
  "/api/v1/client_gateway_tokens/{id}": {
    /** Displays a client by id */
    get: operations["showClientGatewayToken"];
    /** Handles the updating of a client by id */
    put: operations["updateClientGatewayToken"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteClientGatewayToken"];
  };
  "/api/v1/client_gateway_tokens/{id}/edit": {
    /** Displays a client by id */
    get: operations["editClientGatewayToken"];
  };
  "/api/v1/client_gateway_tokens/create": {
    /** Returns a blank object with default values */
    get: operations["getClientGatewayTokensCreate"];
  };
  "/api/v1/client_statement": {
    /** Return a PDF of the client statement */
    post: operations["clientStatement"];
  };
  "/api/v1/companies": {
    /**
     * Lists companies, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the companies, these are handled by the CompanyFilters class which defines the methods available
     */
    get: operations["getCompanies"];
    /** Adds an company to the system */
    post: operations["storeCompany"];
  };
  "/api/v1/companies/create": {
    /** Returns a blank object with default values */
    get: operations["getCompaniesCreate"];
  };
  "/api/v1/companies/{id}": {
    /** Displays an company by id */
    get: operations["showCompany"];
    /** Handles the updating of an company by id */
    put: operations["updateCompany"];
    /** Handles the deletion of an company by id */
    delete: operations["deleteCompany"];
  };
  "/api/v1/companies/{id}/edit": {
    /** Displays an company by id */
    get: operations["editCompany"];
  };
  "/api/v1/companies/{id}/upload": {
    /** Handles the uploading of a document to a company */
    put: operations["uploadCompanies"];
  };
  "/api/v1/companies/{company}/default": {
    /** Sets the company as the default company. */
    post: operations["setDefaultCompany"];
  };
  "/api/v1/company_gateways": {
    /**
     * Lists company_gateways, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the company_gateways, these are handled by the CompanyGatewayFilters class which defines the methods available
     */
    get: operations["getCompanyGateways"];
    /** Adds an CompanyGateway to the system */
    post: operations["storeCompanyGateway"];
  };
  "/api/v1/company_gateways/create": {
    /** Returns a blank object with default values */
    get: operations["getCompanyGatewaysCreate"];
  };
  "/api/v1/company_gateways/{id}": {
    /** Displays an CompanyGateway by id */
    get: operations["showCompanyGateway"];
    /** Handles the updating of an CompanyGateway by id */
    put: operations["updateCompanyGateway"];
    /** Handles the deletion of an CompanyGateway by id */
    delete: operations["deleteCompanyGateway"];
  };
  "/api/v1/company_gateways/{id}/edit": {
    /** Displays an CompanyGateway by id */
    get: operations["editCompanyGateway"];
  };
  "/api/v1/company_gateways/bulk": {
    post: operations["bulkCompanyGateways"];
  };
  "/api/v1/company_ledger": {
    /** Lists the company_ledger. */
    get: operations["getCompanyLedger"];
  };
  "/api/v1/company_users": {
    /** Attempts to update a company user record. A company user can modify only their settings fields. Full access for Admin users */
    post: operations["updateCompanyUser"];
  };
  "/api/v1/connected_account": {
    /** Refreshes the dataset */
    post: operations["connected_account"];
  };
  "/api/v1/credits": {
    /**
     * Lists credits, search and filters allow fine grained lists to be generated.
     *      *
     *      *      Query parameters can be added to performed more fine grained filtering of the credits, these are handled by the CreditFilters class which defines the methods available
     */
    get: operations["getCredits"];
    /** Adds an credit to the system */
    post: operations["storeCredit"];
  };
  "/api/v1/credits/create": {
    /** Returns a blank object with default values */
    get: operations["getCreditsCreate"];
  };
  "/api/v1/credits/{id}": {
    /** Displays an credit by id */
    get: operations["showCredit"];
    /** Handles the updating of an Credit by id */
    put: operations["updateCredit"];
    /** Handles the deletion of an credit by id */
    delete: operations["deleteCredit"];
  };
  "/api/v1/credits/{id}/edit": {
    /** Displays an credit by id */
    get: operations["editCredit"];
  };
  "/api/v1/credits/bulk": {
    post: operations["bulkCredits"];
  };
  "/api/v1/credits/{id}/upload": {
    /** Handles the uploading of a document to a credit */
    put: operations["uploadCredits"];
  };
  "/api/v1/designs": {
    /** Lists designs */
    get: operations["getDesigns"];
    /** Adds an design to a company */
    post: operations["storeDesign"];
  };
  "/api/v1/designs/{id}": {
    /** Displays a design by id */
    get: operations["showDesign"];
    /** Handles the updating of a design by id */
    put: operations["updateDesign"];
    /** Handles the deletion of a design by id */
    delete: operations["deleteDesign"];
  };
  "/api/v1/designs/{id}/edit": {
    /** Displays a design by id */
    get: operations["editDesign"];
  };
  "/api/v1/designs/create": {
    /** Returns a blank object with default values */
    get: operations["getDesignsCreate"];
  };
  "/api/v1/designs/bulk": {
    post: operations["bulkDesigns"];
  };
  "/api/v1/documents": {
    /**
     * Lists documents, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the documents, these are handled by the DocumentsFilters class which defines the methods available
     */
    get: operations["getDocuments"];
  };
  "/api/v1/emails": {
    /** Sends an email for an entity */
    post: operations["sendEmailTemplate"];
  };
  "/api/v1/expense_categories": {
    /** Lists tax rates */
    get: operations["getExpenseCategorys"];
  };
  "/api/v1/expense_categories/create": {
    /** Returns a blank object with default values */
    get: operations["getExpenseCategoryCreate"];
  };
  "/api/v1/expense_categories/{id}": {
    /** Displays an ExpenseCategory by id */
    get: operations["showExpenseCategory"];
    /** Handles the updating of a tax rate by id */
    put: operations["updateExpenseCategory"];
    /** Handles the deletion of an ExpenseCategory by id */
    delete: operations["deleteExpenseCategory"];
  };
  "/api/v1/expense_categories/{id}/edit": {
    /** Displays a Expens Category by id */
    get: operations["editExpenseCategory"];
  };
  "/api/v1/expense_categories/bulk": {
    post: operations["bulkExpenseCategorys"];
  };
  "/api/v1/expenses": {
    /**
     * Lists expenses, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the expenses, these are handled by the ExpenseFilters class which defines the methods available
     */
    get: operations["getExpenses"];
    /** Adds an client to a company */
    post: operations["storeExpense"];
  };
  "/api/v1/expenses/{id}": {
    /** Displays a client by id */
    get: operations["showExpense"];
    /** Handles the updating of a client by id */
    put: operations["updateExpense"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteExpense"];
  };
  "/api/v1/expenses/{id}/edit": {
    /** Displays a client by id */
    get: operations["editExpense"];
  };
  "/api/v1/expenses/create": {
    /** Returns a blank object with default values */
    get: operations["getExpensesCreate"];
  };
  "/api/v1/expenses/bulk": {
    post: operations["bulkExpenses"];
  };
  "/api/v1/expenses/{id}/upload": {
    /** Handles the uploading of a document to a expense */
    put: operations["uploadExpense"];
  };
  "/api/v1/export": {
    /** Export data from the system */
    post: operations["getExport"];
  };
  "/api/v1/group_settings": {
    /**
     * Lists group_settings, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the group_settings, these are handled by the GroupSettingFilters class which defines the methods available
     */
    get: operations["getGroupSettings"];
    /** Adds an GroupSetting to the system */
    post: operations["storeGroupSetting"];
  };
  "/api/v1/group_settings/create": {
    /** Returns a blank object with default values */
    get: operations["getGroupSettingsCreate"];
  };
  "/api/v1/group_settings/{id}": {
    /** Displays an GroupSetting by id */
    get: operations["showGroupSetting"];
    /** Handles the updating of an GroupSetting by id */
    put: operations["updateGroupSetting"];
    /** Handles the deletion of an GroupSetting by id */
    delete: operations["deleteGroupSetting"];
  };
  "/api/v1/group_settings/{id}/edit": {
    /** Displays an GroupSetting by id */
    get: operations["editGroupSetting"];
  };
  "/api/v1/group_settings/bulk": {
    post: operations["bulkGroupSettings"];
  };
  "/api/v1/group_settings/{id}/upload": {
    /** Handles the uploading of a document to a group setting */
    put: operations["uploadGroupSetting"];
  };
  "/api/v1/preimport": {
    /** Pre Import checks - returns a reference to the job and the headers of the CSV */
    post: operations["preimport"];
  };
  "/api/v1/import_json": {
    /** Import data from the system */
    post: operations["getImportJson"];
  };
  "/api/v1/invoices": {
    /**
     * Lists invoices, search and filters allow fine grained lists to be generated.
     *      *
     *      *		Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
     */
    get: operations["getInvoices"];
    /** Adds an invoice to the system */
    post: operations["storeInvoice"];
  };
  "/api/v1/invoices/create": {
    /** Returns a blank object with default values */
    get: operations["getInvoicesCreate"];
  };
  "/api/v1/invoices/{id}": {
    /** Displays an invoice by id */
    get: operations["showInvoice"];
    /** Handles the updating of an invoice by id */
    put: operations["updateInvoice"];
    /** Handles the deletion of an invoice by id */
    delete: operations["deleteInvoice"];
  };
  "/api/v1/invoices/{id}/edit": {
    /** Displays an invoice by id */
    get: operations["editInvoice"];
  };
  "/api/v1/invoices/bulk": {
    post: operations["bulkInvoices"];
  };
  "/api/v1/invoices/{id}/{action}": {
    /**
     * Performs a custom action on an invoice.
     *      *
     *      *        The current range of actions are as follows
     *      *        - clone_to_invoice
     *      *        - clone_to_quote
     *      *        - history
     *      *        - delivery_note
     *      *        - mark_paid
     *      *        - download
     *      *        - archive
     *      *        - delete
     *      *        - email
     */
    get: operations["actionInvoice"];
  };
  "/api/v1/invoice/{invitation_key}/download": {
    /** Downloads a specific invoice */
    get: operations["downloadInvoice"];
  };
  "/api/v1/invoices/{id}/delivery_note": {
    /** Downloads a specific invoice delivery notes */
    get: operations["deliveryNote"];
  };
  "/api/v1/invoices/{id}/upload": {
    /** Handles the uploading of a document to a invoice */
    put: operations["uploadInvoice"];
  };
  "/api/v1/claim_license": {
    /** Attempts to claim a white label license */
    get: operations["getClaimLicense"];
  };
  "/api/v1/logout": {
    /** Lists all logout */
    post: operations["getLogout"];
  };
  "/api/v1/migration/purge/{company}": {
    /** Attempts to purge a company record and all its child records */
    post: operations["postPurgeCompany"];
  };
  "/api/v1/migration/purge_save_settings/{company}": {
    /** Attempts to purge a companies child records but save the company record and its settings */
    post: operations["postPurgeCompanySaveSettings"];
  };
  "/api/v1/migration/start": {
    /** Starts the migration from previous version of Invoice Ninja */
    post: operations["postStartMigration"];
  };
  "/api/v1/one_time_token": {
    /** Attempts to create a one time token */
    post: operations["oneTimeToken"];
  };
  "/api/v1/payments": {
    /**
     * Lists payments, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
     */
    get: operations["getPayments"];
    /** Adds an Payment to the system */
    post: operations["storePayment"];
  };
  "/api/v1/payments/create": {
    /** Returns a blank object with default values */
    get: operations["getPaymentsCreate"];
  };
  "/api/v1/payments/{id}": {
    /** Displays an Payment by id */
    get: operations["showPayment"];
    /** Handles the updating of an Payment by id */
    put: operations["updatePayment"];
    /** Handles the deletion of an Payment by id */
    delete: operations["deletePayment"];
  };
  "/api/v1/payments/{id}/edit": {
    /** Displays an Payment by id */
    get: operations["editPayment"];
  };
  "/api/v1/payments/bulk": {
    post: operations["bulkPayments"];
  };
  "/api/v1/payments/{id}/{action}": {
    /**
     * Performs a custom action on an Payment.
     *
     *     The current range of actions are as follows
     *     - clone_to_Payment
     *     - clone_to_quote
     *     - history
     *     - delivery_note
     *     - mark_paid
     *     - download
     *     - archive
     *     - delete
     *     - email
     */
    get: operations["actionPayment"];
  };
  "/api/v1/payments/refund": {
    /** Adds an Refund to the system */
    post: operations["storeRefund"];
  };
  "/api/v1/payments/{id}/upload": {
    /** Handles the uploading of a document to a payment */
    put: operations["uploadPayment"];
  };
  "/api/v1/payment_terms": {
    /** Lists payment terms */
    get: operations["getPaymentTerms"];
    /** Adds a Payment Term to the system */
    post: operations["storePaymentTerm"];
  };
  "/api/v1/payment_terms/create": {
    /** Returns a blank object with default values */
    get: operations["getPaymentTermsCreate"];
  };
  "/api/v1/payment_terms/{id}": {
    /** Displays an Payment Term by id */
    get: operations["showPaymentTerm"];
    /** Handles the updating of an Payment Termby id */
    put: operations["updatePaymentTerm"];
    /** Handles the deletion of an PaymentTerm by id */
    delete: operations["deletePaymentTerm"];
  };
  "/api/v1/payment_terms/{id}/edit": {
    /** Displays an Payment Term by id */
    get: operations["editPaymentTerms"];
  };
  "/api/v1/payment_terms/bulk": {
    post: operations["bulkPaymentTerms"];
  };
  "/api/v1/ping": {
    /** Attempts to ping the API */
    get: operations["getPing"];
  };
  "/api/v1/health_check": {
    /** Attempts to get a health check from the API */
    get: operations["getHealthCheck"];
  };
  "/api/v1/postmark_webhook": {
    /** Adds an credit to the system */
    post: operations["postmarkWebhook"];
  };
  "/api/v1/preview": {
    /** Returns a pdf preview. */
    post: operations["getPreview"];
  };
  "/api/v1/products": {
    /**
     * Lists products, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the products, these are handled by the ProductFilters class which defines the methods available
     */
    get: operations["getProducts"];
    /** Adds an Product to the system */
    post: operations["storeProduct"];
  };
  "/api/v1/products/create": {
    /** Returns a blank object with default values */
    get: operations["getProductsCreate"];
  };
  "/api/v1/products/{id}": {
    /** Displays an Product by id */
    get: operations["showProduct"];
    /** Handles the updating of an Product by id */
    put: operations["updateProduct"];
    /** Handles the deletion of an Product by id */
    delete: operations["deleteProduct"];
  };
  "/api/v1/products/{id}/edit": {
    /** Displays an Product by id */
    get: operations["editProduct"];
  };
  "/api/v1/products/bulk": {
    post: operations["bulkProducts"];
  };
  "/api/v1/products/{id}/upload": {
    /** Handles the uploading of a document to a product */
    put: operations["uploadProduct"];
  };
  "/api/v1/projects": {
    /** Lists projects */
    get: operations["getProjects"];
    /** Adds an project to a company */
    post: operations["storeProject"];
  };
  "/api/v1/projects/{id}": {
    /** Displays a project by id */
    get: operations["showProject"];
    /** Handles the updating of a project by id */
    put: operations["updateProject"];
    /** Handles the deletion of a project by id */
    delete: operations["deleteProject"];
  };
  "/api/v1/projects/{id}/edit": {
    /** Displays a project by id */
    get: operations["editProject"];
  };
  "/api/v1/projects/create": {
    /** Returns a blank object with default values */
    get: operations["getProjectsCreate"];
  };
  "/api/v1/projects/bulk": {
    post: operations["bulkProjects"];
  };
  "/api/v1/projects/{id}/upload": {
    /** Handles the uploading of a document to a project */
    put: operations["uploadProject"];
  };
  "/api/v1/quotes": {
    /**
     * Lists quotes, search and filters allow fine grained lists to be generated.
     *      *
     *      *      Query parameters can be added to performed more fine grained filtering of the quotes, these are handled by the QuoteFilters class which defines the methods available
     */
    get: operations["getQuotes"];
    /** Adds an Quote to the system */
    post: operations["storeQuote"];
  };
  "/api/v1/quotes/create": {
    /** Returns a blank object with default values */
    get: operations["getQuotesCreate"];
  };
  "/api/v1/quotes/{id}": {
    /** Displays an Quote by id */
    get: operations["showQuote"];
    /** Handles the updating of an Quote by id */
    put: operations["updateQuote"];
    /** Handles the deletion of an Quote by id */
    delete: operations["deleteQuote"];
  };
  "/api/v1/quotes/{id}/edit": {
    /** Displays an Quote by id */
    get: operations["editQuote"];
  };
  "/api/v1/quotes/bulk": {
    post: operations["bulkQuotes"];
  };
  "/api/v1/quotes/{id}/{action}": {
    /**
     * Performs a custom action on an Quote.
     *
     *     The current range of actions are as follows
     *     - clone_to_quote
     *     - history
     *     - delivery_note
     *     - mark_paid
     *     - download
     *     - archive
     *     - delete
     *     - convert
     *     - convert_to_invoice
     *     - email
     */
    get: operations["actionQuote"];
  };
  "/api/v1/quotes/{id}/upload": {
    /** Handles the uploading of a document to a quote */
    put: operations["uploadQuote"];
  };
  "/api/v1/recurring_expenses": {
    /**
     * Lists recurring_expenses, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the recurring_expenses, these are handled by the RecurringExpenseFilters class which defines the methods available
     */
    get: operations["getRecurringExpenses"];
    /** Adds an client to a company */
    post: operations["storeRecurringExpense"];
  };
  "/api/v1/recurring_expenses/{id}": {
    /** Displays a client by id */
    get: operations["showRecurringExpense"];
    /** Handles the updating of a client by id */
    put: operations["updateRecurringExpense"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteRecurringExpense"];
  };
  "/api/v1/recurring_expenses/{id}/edit": {
    /** Displays a client by id */
    get: operations["editRecurringExpense"];
  };
  "/api/v1/recurring_expenses/create": {
    /** Returns a blank object with default values */
    get: operations["getRecurringExpensesCreate"];
  };
  "/api/v1/recurring_expenses/bulk": {
    post: operations["bulkRecurringExpenses"];
  };
  "/api/v1/recurring_expenses/{id}/upload": {
    /** Handles the uploading of a document to a recurring_expense */
    put: operations["uploadRecurringExpense"];
  };
  "/api/v1/recurring_invoices": {
    /**
     * Lists recurring_invoices, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
     */
    get: operations["getRecurringInvoices"];
    /** Adds an RecurringInvoice to the system */
    post: operations["storeRecurringInvoice"];
  };
  "/api/v1/recurring_invoices/create": {
    /** Returns a blank object with default values */
    get: operations["getRecurringInvoicesCreate"];
  };
  "/api/v1/recurring_invoices/{id}": {
    /** Displays an RecurringInvoice by id */
    get: operations["showRecurringInvoice"];
    /** Handles the updating of an RecurringInvoice by id */
    put: operations["updateRecurringInvoice"];
    /** Handles the deletion of an RecurringInvoice by id */
    delete: operations["deleteRecurringInvoice"];
  };
  "/api/v1/recurring_invoices/{id}/edit": {
    /** Displays an RecurringInvoice by id */
    get: operations["editRecurringInvoice"];
  };
  "/api/v1/recurring_invoice/{invitation_key}/download": {
    /** Downloads a specific invoice */
    get: operations["downloadRecurringInvoice"];
  };
  "/api/v1/recurring_invoices/bulk": {
    post: operations["bulkRecurringInvoices"];
  };
  "/api/v1/recurring_invoices/{id}/{action}": {
    /**
     * Performs a custom action on an RecurringInvoice.
     *
     *     The current range of actions are as follows
     *     - clone_to_RecurringInvoice
     *     - clone_to_quote
     *     - history
     *     - delivery_note
     *     - mark_paid
     *     - download
     *     - archive
     *     - delete
     *     - email
     */
    get: operations["actionRecurringInvoice"];
  };
  "/api/v1/recurring_invoices/{id}/upload": {
    /** Handles the uploading of a document to a recurring_invoice */
    put: operations["uploadRecurringInvoice"];
  };
  "/api/v1/recurring_quotes": {
    /**
     * Lists recurring_quotes, search and filters allow fine grained lists to be generated.
     *
     *         Query parameters can be added to performed more fine grained filtering of the recurring_quotes, these are handled by the RecurringQuoteFilters class which defines the methods available
     */
    get: operations["getRecurringQuotes"];
    /** Adds an RecurringQuote to the system */
    post: operations["storeRecurringQuote"];
  };
  "/api/v1/recurring_quotes/create": {
    /** Returns a blank object with default values */
    get: operations["getRecurringQuotesCreate"];
  };
  "/api/v1/recurring_quotes/{id}": {
    /** Displays an RecurringQuote by id */
    get: operations["showRecurringQuote"];
    /** Handles the updating of an RecurringQuote by id */
    put: operations["updateRecurringQuote"];
    /** Handles the deletion of an RecurringQuote by id */
    delete: operations["deleteRecurringQuote"];
  };
  "/api/v1/recurring_quotes/{id}/edit": {
    /** Displays an RecurringQuote by id */
    get: operations["editRecurringQuote"];
  };
  "/api/v1/recurring_quotes/bulk": {
    post: operations["bulkRecurringQuotes"];
  };
  "/api/v1/recurring_quotes/{id}/{action}": {
    /**
     * Performs a custom action on an RecurringQuote.
     *
     *     The current range of actions are as follows
     *     - clone_to_RecurringQuote
     *     - clone_to_quote
     *     - history
     *     - delivery_note
     *     - mark_paid
     *     - download
     *     - archive
     *     - delete
     *     - email
     */
    get: operations["actionRecurringQuote"];
  };
  "/api/v1/self-update": {
    /** Performs a system update */
    post: operations["selfUpdate"];
  };
  "/api/v1/subscriptions": {
    /** Lists subscriptions. */
    get: operations["getSubscriptions"];
    /** Adds an subscriptions to the system */
    post: operations["storeSubscription"];
  };
  "/api/v1/subscriptions/create": {
    /** Returns a blank object with default values */
    get: operations["getSubscriptionsCreate"];
  };
  "/api/v1/subscriptions/{id}": {
    /** Displays an subscriptions by id */
    get: operations["showSubscription"];
    /** Handles the updating of an subscriptions by id */
    put: operations["updateSubscription"];
    /** Handles the deletion of an subscriptions by id */
    delete: operations["deleteSubscription"];
  };
  "/api/v1/subscriptions/{id}/edit": {
    /** Displays an subscriptions by id */
    get: operations["editSubscription"];
  };
  "/api/v1/subscriptions/bulk": {
    post: operations["bulkSubscriptions"];
  };
  "/api/v1/support/messages/send": {
    /** Allows a user to send a support message to the Invoice Ninja Team */
    post: operations["supportMessage"];
  };
  "/api/v1/system_logs": {
    /**
     * Lists system logs, search and filters allow fine grained lists to be generated.
     *      *
     *      *      Query parameters can be added to performed more fine grained filtering of the system logs, these are handled by the SystemLogFilters class which defines the methods available
     */
    get: operations["getSystemLogs"];
  };
  "/api/v1/system_logs/{id}": {
    /** Displays a system_logs by id */
    get: operations["showSystemLogs"];
  };
  "/api/v1/tasks": {
    /**
     * Lists tasks, search and filters allow fine grained lists to be generated.
     *      *
     *      *   Query parameters can be added to performed more fine grained filtering of the tasks, these are handled by the TaskFilters class which defines the methods available
     */
    get: operations["getTasks"];
    /** Adds an client to a company */
    post: operations["storeTask"];
  };
  "/api/v1/tasks/{id}": {
    /** Displays a client by id */
    get: operations["showTask"];
    /** Handles the updating of a client by id */
    put: operations["updateTask"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteTask"];
  };
  "/api/v1/tasks/{id}/edit": {
    /** Displays a client by id */
    get: operations["editTask"];
  };
  "/api/v1/tasks/create": {
    /** Returns a blank object with default values */
    get: operations["getTasksCreate"];
  };
  "/api/v1/tasks/bulk": {
    post: operations["bulkTasks"];
  };
  "/api/v1/tasks/{id}/upload": {
    /** Handles the uploading of a document to a task */
    put: operations["uploadTask"];
  };
  "/api/v1/tasks/stort": {
    /** Sorts tasks after drag and drop on the KanBan. */
    post: operations["sortTasks"];
  };
  "/api/v1/task_statuses": {
    /** Lists task statuses */
    get: operations["getTaskStatuses"];
    /** Adds a TaskStatusto the system */
    post: operations["storeTaskStatus"];
  };
  "/api/v1/task_statuses/create": {
    /** Returns a blank object with default values */
    get: operations["getTaskStatussCreate"];
  };
  "/api/v1/task_statuses/{id}": {
    /** Displays an TaskStatusby id */
    get: operations["showTaskStatus"];
    /** Handles the updating of an TaskStatus Termby id */
    put: operations["updateTaskStatus"];
    /** Handles the deletion of an TaskStatus by id */
    delete: operations["deleteTaskStatus"];
  };
  "/api/v1/task_statuses/{id}/edit": {
    /** Displays an TaskStatusby id */
    get: operations["editTaskStatuss"];
  };
  "/api/v1/task_statuses/bulk": {
    post: operations["bulkTaskStatuss"];
  };
  "/api/v1/tax_rates": {
    /** Lists tax rates */
    get: operations["getTaxRates"];
  };
  "/api/v1/tax_rates/create": {
    /** Returns a blank object with default values */
    get: operations["getTaxRateCreate"];
  };
  "/api/v1/tax_rates/{id}": {
    /** Displays an TaxRate by id */
    get: operations["showTaxRate"];
    /** Handles the updating of a tax rate by id */
    put: operations["updateTaxRate"];
    /** Handles the deletion of an TaxRate by id */
    delete: operations["deleteTaxRate"];
  };
  "/api/v1/tax_rates/{id}/edit": {
    /** Displays a Tax Rate by id */
    get: operations["editTaxRate"];
  };
  "/api/v1/tax_rates/bulk": {
    post: operations["bulkTaxRates"];
  };
  "/api/v1/templates": {
    /** Returns a entity template with the template variables replaced with the Entities */
    post: operations["getShowTemplate"];
  };
  "/api/v1/tokens": {
    /**
     * Lists company tokens.
     *      *
     *      *   Query parameters can be added to performed more fine grained filtering of the tokens, these are handled by the TokenFilters class which defines the methods available
     */
    get: operations["getTokens"];
    /** Adds an token to a company */
    post: operations["storeToken"];
  };
  "/api/v1/tokens/{id}": {
    /** Displays a token by id */
    get: operations["showToken"];
    /** Handles the updating of a token by id */
    put: operations["updateToken"];
    /** Handles the deletion of a token by id */
    delete: operations["deleteToken"];
  };
  "/api/v1/tokens/{id}/edit": {
    /** Displays a token by id */
    get: operations["editToken"];
  };
  "/api/v1/tokens/create": {
    /** Returns a blank object with default values */
    get: operations["getTokensCreate"];
  };
  "/api/v1/tokens/bulk": {
    post: operations["bulkTokens"];
  };
  "/api/v1/users": {
    /**
     * Lists users, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
     */
    get: operations["getUsers"];
    /** Adds an User to the system */
    post: operations["storeUser"];
  };
  "/api/v1/users/create": {
    /** Returns a blank object with default values */
    get: operations["getUsersCreate"];
  };
  "/api/v1/users/{id}": {
    /** Displays an User by id */
    get: operations["showUser"];
    /** Handles the updating of an User by id */
    put: operations["updateUser"];
    /** Handles the deletion of an User by id */
    delete: operations["deleteUser"];
  };
  "/api/v1/users/{id}/edit": {
    /** Displays an User by id */
    get: operations["editUser"];
  };
  "/api/v1/users/bulk": {
    post: operations["bulkUsers"];
  };
  "/api/v1/users/{user}/detach_from_company": {
    /** Detach an existing user from a company */
    delete: operations["detachUser"];
  };
  "/api/v1/users/{user}/invite": {
    /** Reconfirm an existing user from a company */
    post: operations["inviteUser"];
  };
  "/api/v1/users/{user}/reconfirm": {
    /** Reconfirm an existing user from a company */
    post: operations["inviteUserReconfirm"];
  };
  "/api/v1/vendors": {
    /**
     * Lists vendors, search and filters allow fine grained lists to be generated.
     *
     *     Query parameters can be added to performed more fine grained filtering of the vendors, these are handled by the VendorFilters class which defines the methods available
     */
    get: operations["getVendors"];
    /** Adds an client to a company */
    post: operations["storeVendor"];
  };
  "/api/v1/vendors/{id}": {
    /** Displays a client by id */
    get: operations["showVendor"];
    /** Handles the updating of a client by id */
    put: operations["updateVendor"];
    /** Handles the deletion of a client by id */
    delete: operations["deleteVendor"];
  };
  "/api/v1/vendors/{id}/edit": {
    /** Displays a client by id */
    get: operations["editVendor"];
  };
  "/api/v1/vendors/create": {
    /** Returns a blank object with default values */
    get: operations["getVendorsCreate"];
  };
  "/api/v1/vendors/bulk": {
    post: operations["bulkVendors"];
  };
  "/api/v1/vendors/{id}/upload": {
    /** Handles the uploading of a document to a vendor */
    put: operations["uploadVendor"];
  };
  "/api/v1/webcron": {
    /** Executes the task scheduler via a webcron service */
    get: operations["webcron"];
  };
  "/api/v1/webhooks": {
    /**
     * Lists Webhooks, search and filters allow fine grained lists to be generated.
     *      *
     *      *      Query parameters can be added to performed more fine grained filtering of the Webhooks, these are handled by the WebhookFilters class which defines the methods available
     */
    get: operations["getWebhooks"];
    /** Adds an Webhook to a company */
    post: operations["storeWebhook"];
  };
  "/api/v1/webhooks/{id}": {
    /** Displays a Webhook by id */
    get: operations["showWebhook"];
    /** Handles the updating of a Webhook by id */
    put: operations["updateWebhook"];
    /** Handles the deletion of a Webhook by id */
    delete: operations["deleteWebhook"];
  };
  "/api/v1/webhooks/{id}/edit": {
    /** Displays a Webhook by id */
    get: operations["editWebhook"];
  };
  "/api/v1/webhooks/create": {
    /** Returns a blank object with default values */
    get: operations["getWebhooksCreate"];
  };
  "/api/v1/webhooks/bulk": {
    post: operations["bulkWebhooks"];
  };
}

export interface components {
  schemas: {
    Account: {
      /** The account hashed id */
      id?: string;
    };
    Activity: {
      /** ______ */
      id?: string;
      /** ______ */
      activity_type_id?: string;
      /** ______ */
      client_id?: string;
      /** ______ */
      company_id?: string;
      /** ______ */
      user_id?: string;
      /** ______ */
      invoice_id?: string;
      /** ______ */
      payment_id?: string;
      /** ______ */
      credit_id?: string;
      /** ______ */
      updated_at?: string;
      /** ______ */
      expense_id?: string;
      /** ______ */
      is_system?: boolean;
      /** ______ */
      contact_id?: string;
      /** ______ */
      task_id?: string;
      /** ______ */
      notes?: string;
      /** ______ */
      ip?: string;
    };
    Subscription: {
      /** ______ */
      id?: string;
      /** ______ */
      user_id?: string;
      /** ______ */
      product_id?: string;
      /** ______ */
      company_id?: string;
      /** ______ */
      recurring_invoice_id?: string;
      /** ______ */
      is_recurring?: boolean;
      /** integer const representation of the frequency */
      frequency_id?: string;
      /** enum setting */
      auto_bill?: string;
      /** ______ */
      promo_code?: string;
      /** ______ */
      promo_discount?: number;
      /** ______ */
      is_amount_discount?: boolean;
      /** ______ */
      allow_cancellation?: boolean;
      /** ______ */
      per_seat_enabled?: boolean;
      /** ______ */
      currency_id?: number;
      /** ______ */
      max_seats_limit?: number;
      /** ______ */
      trial_enabled?: boolean;
      /** ______ */
      trial_duration?: number;
      /** ______ */
      allow_query_overrides?: boolean;
      /** ______ */
      allow_plan_changes?: boolean;
      /** ______ */
      refund_period?: number;
      /** ______ */
      webhook_configuration?: string;
      /** ______ */
      is_deleted?: boolean;
      /** Timestamp */
      archived_at?: number;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
    };
    BulkAction: number[];
    ClientContact: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      first_name?: string;
      /** ________ */
      last_name?: string;
      /** ________ */
      phone?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      email?: string;
      /** ________ */
      accepted_terms_version?: string;
      /** ________ */
      password?: string;
      /** ________ */
      "confirmation-code"?: string;
      /** ________ */
      token?: string;
      /** ________ */
      is_primary?: boolean;
      /** ________ */
      confirmed?: boolean;
      /** ________ */
      is_locked?: boolean;
      /** ________ */
      send_email?: boolean;
      /** ________ */
      failed_logins?: number;
      /** ________ */
      email_verified_at?: number;
      /** ________ */
      paid_to_date?: number;
      /** Timestamp */
      last_login?: number;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      deleted_at?: number;
    };
    ClientGatewayToken: {
      /** ______ */
      id?: string;
      /** ______ */
      company_id?: string;
      /** ______ */
      client_id?: string;
      /** ______ */
      token?: string;
      /** ______ */
      routing_number?: string;
      /** ______ */
      company_gateway_id?: string;
      /** ______ */
      is_default?: boolean;
    };
    Client: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** ________ */
      company_id?: string;
      contacts?: components["schemas"]["ClientContact"][];
      /** ________ */
      name?: string;
      /** ________ */
      website?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      client_hash?: string;
      /** ________ */
      industry_id?: string;
      /** ________ */
      size_id?: string;
      /** ________ */
      address1?: string;
      /** ________ */
      address2?: string;
      /** ________ */
      city?: string;
      /** ________ */
      state?: string;
      /** ________ */
      postal_code?: string;
      /** The client phone number */
      phone?: string;
      /** ________ */
      country_id?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      vat_number?: string;
      /** ________ */
      id_number?: string;
      /** ________ */
      number?: string;
      /** ________ */
      shipping_address1?: string;
      /** ________ */
      shipping_address2?: string;
      /** ________ */
      shipping_city?: string;
      /** ________ */
      shipping_state?: string;
      /** ________ */
      shipping_postal_code?: string;
      /** ________ */
      shipping_country_id?: string;
      /** ________ */
      is_deleted?: boolean;
      /** ________ */
      balance?: number;
      /** ________ */
      paid_to_date?: number;
      /** An amount which is available to the client for future use. */
      credit_balance?: number;
      /** Timestamp */
      last_login?: number;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      settings?: components["schemas"]["CompanySettings"];
    };
    CompanyGateway: {
      /** ______ */
      id?: string;
      /** ______ */
      company_id?: string;
      /** ______ */
      gateway_key?: string;
      /** Bitmask representation of cards */
      accepted_credit_cards?: number;
      /** ______ */
      require_billing_address?: boolean;
      /** ______ */
      require_shipping_address?: boolean;
      /** The configuration map for the gateway */
      config?: string;
      /** ______ */
      update_details?: boolean;
      /** A mapped collection of the fees and limits for the configured gateway */
      fees_and_limits?: components["schemas"]["FeesAndLimits"][];
    };
    CompanyLedger: {
      /** This field will reference one of the following entity hashed ID payment_id, invoice_id or credit_id */
      entity_id?: string;
      /** The notes which reference this entry of the ledger */
      notes?: string;
      /** The client balance */
      balance?: number;
      /** The amount the client balance is adjusted by */
      adjustment?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      created_at?: number;
    };
    Company: {
      /** The company hash id */
      id?: string;
      /** The company size ID */
      size_id?: string;
      /** The company industry ID */
      industry_id?: string;
      /** The slack webhook notification URL */
      slack_webhook_url?: string;
      /** The google analytics key */
      google_analytics_key?: string;
      /** Determines the client facing urls ie: subdomain,domain,iframe */
      portal_mode?: string;
      /** Specifies the first part of the company domain ie acme in acme.domain.com */
      subdomain?: string;
      /** The fully qualified domain for client facing URLS */
      portal_domain?: string;
      /** Number of taxes rates used per entity */
      enabled_tax_rates?: number;
      /** Toggles filling a product description based on product key */
      fill_products?: boolean;
      /** ___________ */
      convert_products?: boolean;
      /** Toggles updating a product description which description changes */
      update_products?: boolean;
      /** Toggles showing a product description which description changes */
      show_product_details?: boolean;
      /** Custom fields map */
      custom_fields?: { [key: string]: unknown };
      /** ______________ */
      enable_product_cost?: boolean;
      /** ______________ */
      enable_product_quantity?: boolean;
      /** ______________ */
      default_quantity?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_taxes1?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_taxes2?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_taxes3?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_taxes4?: boolean;
      /** The company logo - binary */
      logo?: { [key: string]: unknown };
      settings?: components["schemas"]["CompanySettings"];
    };
    CompanySettings: {
      /** The timezone id */
      timezone_id?: string;
      /** ____________ */
      date_format_id?: string;
      /** ____________ */
      military_time?: boolean;
      /** ____________ */
      language_id?: string;
      /** ____________ */
      show_currency_code?: boolean;
      /** The default currency id */
      currency_id?: string;
      /** -1 sets no payment term, 0 sets payment due immediately, positive integers indicates payment terms in days */
      payment_terms?: number;
      /** A commad separate list of available gateways */
      company_gateway_ids?: string;
      /** ____________ */
      custom_value1?: string;
      /** ____________ */
      custom_value2?: string;
      /** ____________ */
      custom_value3?: string;
      /** ____________ */
      custom_value4?: string;
      /** ____________ */
      default_task_rate?: number;
      /** ____________ */
      send_reminders?: boolean;
      /** ____________ */
      enable_client_portal_tasks?: boolean;
      /** options include plain,light,dark,custom */
      email_style?: string;
      /** The reply to email address */
      reply_to_email?: string;
      /** A comma separate list of BCC emails */
      bcc_email?: string;
      /** Toggles whether to attach PDF as attachment */
      pdf_email_attachment?: boolean;
      /** Toggles whether to attach UBL as attachment */
      ubl_email_attachment?: boolean;
      /** The custom template */
      email_style_custom?: string;
      /** enum when the invoice number counter is set, ie when_saved, when_sent, when_paid */
      counter_number_applied?: string;
      /** enum when the quote number counter is set, ie when_saved, when_sent */
      quote_number_applied?: string;
      /** ____________ */
      custom_message_dashboard?: string;
      /** ____________ */
      custom_message_unpaid_invoice?: string;
      /** ____________ */
      custom_message_paid_invoice?: string;
      /** ____________ */
      custom_message_unapproved_quote?: string;
      /** ____________ */
      lock_invoices?: boolean;
      /** ____________ */
      auto_archive_invoice?: boolean;
      /** ____________ */
      auto_archive_quote?: boolean;
      /** ____________ */
      auto_convert_quote?: boolean;
      /** ____________ */
      inclusive_taxes?: boolean;
      /** JSON payload of customized translations */
      translations?: { [key: string]: unknown };
      /** Allows customisation of the task number pattern */
      task_number_pattern?: string;
      /** ____________ */
      task_number_counter?: number;
      /** Time from UTC +0 when the email will be sent to the client */
      reminder_send_time?: number;
      /** Allows customisation of the expense number pattern */
      expense_number_pattern?: string;
      /** ____________ */
      expense_number_counter?: number;
      /** Allows customisation of the vendor number pattern */
      vendor_number_pattern?: string;
      /** ____________ */
      vendor_number_counter?: number;
      /** Allows customisation of the ticket number pattern */
      ticket_number_pattern?: string;
      /** ____________ */
      ticket_number_counter?: number;
      /** Allows customisation of the payment number pattern */
      payment_number_pattern?: string;
      /** ____________ */
      payment_number_counter?: number;
      /** Allows customisation of the invoice number pattern */
      invoice_number_pattern?: string;
      /** ____________ */
      invoice_number_counter?: number;
      /** Allows customisation of the quote number pattern */
      quote_number_pattern?: string;
      /** ____________ */
      quote_number_counter?: number;
      /** Allows customisation of the client number pattern */
      client_number_pattern?: string;
      /** ____________ */
      client_number_counter?: number;
      /** Allows customisation of the credit number pattern */
      credit_number_pattern?: string;
      /** ____________ */
      credit_number_counter?: number;
      /** This string is prepended to the recurring invoice number */
      recurring_invoice_number_prefix?: string;
      /** CONSTANT which is used to apply the frequency which the counters are reset */
      reset_counter_frequency_id?: number;
      /** The explicit date which is used to reset counters */
      reset_counter_date?: string;
      /** Pads the counter with leading zeros */
      counter_padding?: number;
      /** Flags whether to share the counter for invoices and quotes */
      shared_invoice_quote_counter?: boolean;
      /** Determines if client fields are updated from third party APIs */
      update_products?: boolean;
      convert_products?: boolean;
      /** Automatically fill products based on product_key */
      fill_products?: boolean;
      /** The default invoice terms */
      invoice_terms?: string;
      /** The default quote terms */
      quote_terms?: string;
      /** Taxes can be applied to the invoice */
      invoice_taxes?: number;
      /** The default design id (invoice, quote etc) */
      invoice_design_id?: string;
      /** The default design id (invoice, quote etc) */
      quote_design_id?: string;
      /** The default invoice footer */
      invoice_footer?: string;
      /** JSON string of invoice labels */
      invoice_labels?: string;
      /** The tax rate (float) */
      tax_rate1?: number;
      /** The tax name */
      tax_name1?: string;
      /** The tax rate (float) */
      tax_rate2?: number;
      /** The tax name */
      tax_name2?: string;
      /** The tax rate (float) */
      tax_rate3?: number;
      /** The tax name */
      tax_name3?: string;
      /** The default payment type id */
      payment_type_id?: string;
      /** JSON string of custom fields */
      custom_fields?: string;
      /** The default email footer */
      email_footer?: string;
      /** The email driver to use to send email, options include default, gmail */
      email_sending_method?: string;
      /** The hashed_id of the user account to send email from */
      gmail_sending_user_id?: string;
      email_subject_invoice?: string;
      email_subject_quote?: string;
      email_subject_payment?: string;
      /** The full template for invoice emails */
      email_template_invoice?: string;
      /** The full template for quote emails */
      email_template_quote?: string;
      /** The full template for payment emails */
      email_template_payment?: string;
      /** Email subject for Reminder */
      email_subject_reminder1?: string;
      /** Email subject for Reminder */
      email_subject_reminder2?: string;
      /** Email subject for Reminder */
      email_subject_reminder3?: string;
      /** Email subject for endless reminders */
      email_subject_reminder_endless?: string;
      /** The full template for Reminder 1 */
      email_template_reminder1?: string;
      /** The full template for Reminder 2 */
      email_template_reminder2?: string;
      /** The full template for Reminder 3 */
      email_template_reminder3?: string;
      /** The full template for enless reminders */
      email_template_reminder_endless?: string;
      /** Toggles whether a password is required to log into the client portal */
      enable_portal_password?: boolean;
      /** Toggles whether the terms dialogue is shown to the client */
      show_accept_invoice_terms?: boolean;
      /** Toggles whether the terms dialogue is shown to the client */
      show_accept_quote_terms?: boolean;
      /** Toggles whether a invoice signature is required */
      require_invoice_signature?: boolean;
      /** Toggles whether a quote signature is required */
      require_quote_signature?: boolean;
      /** The company name */
      name?: string;
      /** The company logo file */
      company_logo?: { [key: string]: unknown };
      /** The company website URL */
      website?: string;
      /** ____________ */
      address1?: string;
      /** ____________ */
      address2?: string;
      /** ____________ */
      city?: string;
      /** ____________ */
      state?: string;
      /** ____________ */
      postal_code?: string;
      /** ____________ */
      phone?: string;
      /** ____________ */
      email?: string;
      /** The country ID */
      country_id?: string;
      /** ____________ */
      vat_number?: string;
      /** The default page size */
      page_size?: string;
      /** The font size */
      font_size?: number;
      /** The primary font */
      primary_font?: string;
      /** The secondary font */
      secondary_font?: string;
      /** ____________ */
      hide_paid_to_date?: boolean;
      /** ____________ */
      embed_documents?: boolean;
      /** ____________ */
      all_pages_header?: boolean;
      /** ____________ */
      all_pages_footer?: boolean;
      /** ____________ */
      document_email_attachment?: boolean;
      /** ____________ */
      enable_client_portal_password?: boolean;
      /** ____________ */
      enable_email_markup?: boolean;
      /** ____________ */
      enable_client_portal_dashboard?: boolean;
      /** ____________ */
      enable_client_portal?: boolean;
      /** ____________ */
      email_template_statement?: string;
      /** ____________ */
      email_subject_statement?: string;
      /** ____________ */
      signature_on_pdf?: boolean;
      /** ____________ */
      quote_footer?: string;
      /** ____________ */
      email_subject_custom1?: string;
      /** ____________ */
      email_subject_custom2?: string;
      /** ____________ */
      email_subject_custom3?: string;
      /** ____________ */
      email_template_custom1?: string;
      /** ____________ */
      email_template_custom2?: string;
      /** ____________ */
      email_template_custom3?: string;
      /** ____________ */
      enable_reminder1?: boolean;
      /** ____________ */
      enable_reminder2?: boolean;
      /** ____________ */
      enable_reminder3?: boolean;
      /** The Reminder interval */
      num_days_reminder1?: number;
      /** The Reminder interval */
      num_days_reminder2?: number;
      /** The Reminder interval */
      num_days_reminder3?: number;
      /** (enum: after_invoice_date, before_due_date, after_due_date) */
      schedule_reminder1?: string;
      /** (enum: after_invoice_date, before_due_date, after_due_date) */
      schedule_reminder2?: string;
      /** (enum: after_invoice_date, before_due_date, after_due_date) */
      schedule_reminder3?: string;
      /** ____________ */
      late_fee_amount1?: number;
      /** ____________ */
      late_fee_amount2?: number;
      /** ____________ */
      late_fee_amount3?: number;
      /** ____________ */
      endless_reminder_frequency_id?: string;
      /** ____________ */
      client_online_payment_notification?: boolean;
      /** ____________ */
      client_manual_payment_notification?: boolean;
    };
    CompanyToken: {
      /** The token name */
      name?: string;
      /** The token value */
      token?: string;
      /** Determines whether the token is created by the system rather than a user */
      is_system?: boolean;
    };
    CompanyUser: {
      /** The company user permissions */
      permissions?: string;
      /** The company name */
      settings?: { [key: string]: unknown };
      /** Determines whether the user owns this company */
      is_owner?: boolean;
      /** Determines whether the user is the admin of this company */
      is_admin?: boolean;
      /** Determines whether the users access to this company has been locked */
      is_locked?: boolean;
      /** The last time the record was modified */
      updated_at?: number;
      /** Timestamp when the user was archived */
      deleted_at?: number;
      account?: components["schemas"]["Account"];
      company?: components["schemas"]["Company"];
      user?: components["schemas"]["User"];
      token?: components["schemas"]["CompanyToken"];
    };
    CreditPaymentable: {
      /** ______ */
      credit_id?: string;
      /** ______ */
      amount?: string;
    };
    Credit: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      status_id?: string;
      /** The linked invoice this credit is applied to */
      invoice_id?: string;
      /** The credit number - is a unique alpha numeric number per credit per company */
      number?: string;
      /** ________ */
      po_number?: string;
      /** ________ */
      terms?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      footer?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** The total taxes for the credit */
      total_taxes?: number;
      /** _________ */
      line_items?: { [key: string]: unknown };
      /** _________ */
      amount?: number;
      /** _________ */
      balance?: number;
      /** _________ */
      paid_to_date?: number;
      /** _________ */
      discount?: number;
      /** _________ */
      partial?: number;
      /** _________ */
      is_amount_discount?: boolean;
      /** _________ */
      is_deleted?: boolean;
      /** Defines the type of taxes used as either inclusive or exclusive */
      uses_inclusive_taxes?: boolean;
      /** The Credit Date */
      date?: string;
      /** The last date the credit was sent out */
      last_sent_date?: string;
      /** The Next date for a reminder to be sent */
      next_send_date?: string;
      /** _________ */
      partial_due_date?: string;
      /** _________ */
      due_date?: string;
      settings?: components["schemas"]["CompanySettings"];
      /** Timestamp */
      last_viewed?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
      /** First Custom Surcharge */
      custom_surcharge1?: number;
      /** Second Custom Surcharge */
      custom_surcharge2?: number;
      /** Third Custom Surcharge */
      custom_surcharge3?: number;
      /** Fourth Custom Surcharge */
      custom_surcharge4?: number;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax1?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax2?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax3?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax4?: boolean;
    };
    Design: {
      /** The design hashed id */
      id?: string;
      /** The design name */
      name?: string;
      /** The design HTML */
      design?: string;
      /** Flag to determine if the design is a custom user design */
      is_custom?: boolean;
      /** Flag to determine if the design is available for use */
      is_active?: boolean;
      /** Flag to determine if the design is deleted */
      is_deleted?: boolean;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      deleted_at?: number;
    };
    Document: {
      /** The design hashed id */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** __________ */
      project_id?: string;
      /** __________ */
      vendor_id?: string;
      /** The design name */
      name?: string;
      /** The design name */
      url?: string;
      /** The design name */
      preview?: string;
      /** The design name */
      type?: string;
      /** The design name */
      disk?: string;
      /** The design name */
      hash?: string;
      /** Flag to determine if the design is deleted */
      is_deleted?: boolean;
      /** Flag to determine if the document is a default doc */
      is_default?: boolean;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      deleted_at?: number;
    };
    Error: {
      /** The company name */
      message?: string;
      /** The HTTP error code */
      code?: number;
    };
    ExpenseCategory: {
      /** ______ */
      id?: string;
      /** ______ */
      name?: string;
      /** ______ */
      user_id?: string;
      /** ______ */
      is_deleted?: boolean;
      /** ______ */
      updated_at?: string;
      /** ______ */
      created_at?: string;
    };
    Expense: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      invoice_id?: string;
      /** ________ */
      bank_id?: string;
      /** ________ */
      invoice_currency_id?: string;
      /** ________ */
      expense_currency_id?: string;
      /** ________ */
      invoice_category_id?: string;
      /** ________ */
      payment_type_id?: string;
      /** ________ */
      recurring_expense_id?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      transaction_reference?: string;
      /** ________ */
      transcation_id?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** _________ */
      amount?: number;
      /** _________ */
      foreign_amount?: number;
      /** _________ */
      exchange_rate?: number;
      /** ________ */
      date?: string;
      /** ________ */
      payment_date?: string;
      /** _________ */
      should_be_invoiced?: boolean;
      /** _________ */
      is_deleted?: boolean;
      invoice_documents?: boolean;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
    };
    FeesAndLimits: {
      /** ______ */
      min_limit?: string;
      /** ______ */
      max_limit?: string;
      /** ______ */
      fee_amount?: number;
      /** ______ */
      fee_percent?: number;
      /** ______ */
      fee_tax_name1?: string;
      /** ______ */
      fee_tax_name2?: string;
      /** ______ */
      fee_tax_name3?: string;
      /** ______ */
      fee_tax_rate1?: number;
      /** ______ */
      fee_tax_rate2?: number;
      /** ______ */
      fee_tax_rate3?: number;
      /** ______ */
      fee_cap?: number;
      /** ______ */
      adjust_fee_percent?: boolean;
    };
    FillableInvoice: {
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      client_id?: string;
      /** The invoice number - is a unique alpha numeric number per invoice per company */
      number?: string;
      /** ________ */
      po_number?: string;
      /** ________ */
      terms?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      footer?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** _________ */
      line_items?: { [key: string]: unknown };
      /** _________ */
      discount?: number;
      /** _________ */
      partial?: number;
      /** _________ */
      is_amount_discount?: boolean;
      /** Defines the type of taxes used as either inclusive or exclusive */
      uses_inclusive_taxes?: boolean;
      /** The Invoice Date */
      date?: string;
      /** _________ */
      partial_due_date?: string;
      /** _________ */
      due_date?: string;
      /** First Custom Surcharge */
      custom_surcharge1?: number;
      /** Second Custom Surcharge */
      custom_surcharge2?: number;
      /** Third Custom Surcharge */
      custom_surcharge3?: number;
      /** Fourth Custom Surcharge */
      custom_surcharge4?: number;
    };
    GroupSetting: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      name?: string;
      /** ________ */
      settings?: { [key: string]: unknown };
    };
    InvoicePaymentable: {
      /** ______ */
      invoice_id?: string;
      /** ______ */
      amount?: string;
    };
    Invoice: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      status_id?: string;
      /** The invoice number - is a unique alpha numeric number per invoice per company */
      number?: string;
      /** ________ */
      po_number?: string;
      /** ________ */
      terms?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      footer?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** The total taxes for the invoice */
      total_taxes?: number;
      /** _________ */
      line_items?: { [key: string]: unknown };
      /** _________ */
      amount?: number;
      /** _________ */
      balance?: number;
      /** _________ */
      paid_to_date?: number;
      /** _________ */
      discount?: number;
      /** _________ */
      partial?: number;
      /** _________ */
      is_amount_discount?: boolean;
      /** _________ */
      is_deleted?: boolean;
      /** Defines the type of taxes used as either inclusive or exclusive */
      uses_inclusive_taxes?: boolean;
      /** The Invoice Date */
      date?: string;
      /** The last date the invoice was sent out */
      last_sent_date?: string;
      /** The Next date for a reminder to be sent */
      next_send_date?: string;
      /** _________ */
      partial_due_date?: string;
      /** _________ */
      due_date?: string;
      settings?: components["schemas"]["CompanySettings"];
      /** Timestamp */
      last_viewed?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
      /** First Custom Surcharge */
      custom_surcharge1?: number;
      /** Second Custom Surcharge */
      custom_surcharge2?: number;
      /** Third Custom Surcharge */
      custom_surcharge3?: number;
      /** Fourth Custom Surcharge */
      custom_surcharge4?: number;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax1?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax2?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax3?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax4?: boolean;
    };
    Payment: {
      /** ______ */
      id?: string;
      /** ______ */
      client_id?: string;
      /** ______ */
      invitation_id?: string;
      /** ______ */
      client_contact_id?: string;
      /** ______ */
      user_id?: string;
      /** The Payment Type ID */
      type_id?: string;
      /** The Payment date */
      date?: string;
      /** The transaction reference as defined by the payment gateway */
      transaction_reference?: string;
      /** ______ */
      assigned_user_id?: string;
      /** ______ */
      private_notes?: string;
      /** ______ */
      is_manual?: boolean;
      /** ______ */
      is_deleted?: boolean;
      /** The amount of this payment */
      amount?: number;
      /** The refunded amount of this payment */
      refunded?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
      /** The company gateway id */
      company_gateway_id?: string;
      paymentables?: components["schemas"]["Paymentable"];
      invoices?: components["schemas"]["InvoicePaymentable"][];
      credits?: components["schemas"]["CreditPaymentable"][];
    };
    PaymentTerm: {
      /** The payment term length in days */
      num_days?: number;
      /** The payment term length in string format */
      name?: string;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
    };
    Paymentable: {
      /** The paymentable hashed id */
      id?: string;
      /** The invoice hashed id */
      invoice_id?: string;
      /** The credit hashed id */
      credit_id?: string;
      /** ______ */
      refunded?: number;
      /** ______ */
      amount?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      created_at?: number;
    };
    Product: {
      /** ______ */
      id?: string;
    };
    Project: {
      /** ______ */
      id?: string;
      /** ______ */
      name?: string;
    };
    Quote: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      status_id?: string;
      /** The quote number - is a unique alpha numeric number per quote per company */
      number?: string;
      /** ________ */
      po_number?: string;
      /** ________ */
      terms?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      footer?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** The total taxes for the quote */
      total_taxes?: number;
      /** _________ */
      line_items?: { [key: string]: unknown };
      /** _________ */
      amount?: number;
      /** _________ */
      balance?: number;
      /** _________ */
      paid_to_date?: number;
      /** _________ */
      discount?: number;
      /** _________ */
      partial?: number;
      /** _________ */
      is_amount_discount?: boolean;
      /** _________ */
      is_deleted?: boolean;
      /** Defines the type of taxes used as either inclusive or exclusive */
      uses_inclusive_taxes?: boolean;
      /** The Quote Date */
      date?: string;
      /** The last date the quote was sent out */
      last_sent_date?: string;
      /** The Next date for a reminder to be sent */
      next_send_date?: string;
      /** _________ */
      partial_due_date?: string;
      /** _________ */
      due_date?: string;
      settings?: components["schemas"]["CompanySettings"];
      /** Timestamp */
      last_viewed?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
      /** First Custom Surcharge */
      custom_surcharge1?: number;
      /** Second Custom Surcharge */
      custom_surcharge2?: number;
      /** Third Custom Surcharge */
      custom_surcharge3?: number;
      /** Fourth Custom Surcharge */
      custom_surcharge4?: number;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax1?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax2?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax3?: boolean;
      /** Toggles charging taxes on custom surcharge amounts */
      custom_surcharge_tax4?: boolean;
    };
    RecurringExpense: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      invoice_id?: string;
      /** ________ */
      bank_id?: string;
      /** ________ */
      invoice_currency_id?: string;
      /** ________ */
      expense_currency_id?: string;
      /** ________ */
      invoice_category_id?: string;
      /** ________ */
      payment_type_id?: string;
      /** ________ */
      recurring_expense_id?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      public_notes?: string;
      /** ________ */
      transaction_reference?: string;
      /** ________ */
      transcation_id?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      tax_name1?: string;
      /** ________ */
      tax_name2?: string;
      /** _________ */
      tax_rate1?: number;
      /** _________ */
      tax_rate2?: number;
      /** ________ */
      tax_name3?: string;
      /** _________ */
      tax_rate3?: number;
      /** _________ */
      amount?: number;
      /** _________ */
      frequency_id?: number;
      /** _________ */
      remaining_cycles?: number;
      /** _________ */
      foreign_amount?: number;
      /** _________ */
      exchange_rate?: number;
      /** ________ */
      date?: string;
      /** ________ */
      payment_date?: string;
      /** _________ */
      should_be_invoiced?: boolean;
      /** _________ */
      is_deleted?: boolean;
      /** The Date it was sent last */
      last_sent_date?: string;
      /** The next send date */
      next_send_date?: string;
      invoice_documents?: boolean;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
    };
    RecurringInvoice: {
      /** ______ */
      id?: string;
    };
    RecurringQuote: {
      /** ______ */
      id?: string;
    };
    SystemLog: {
      /** The account hashed id */
      id?: string;
      /** The company hashed id */
      company_id?: string;
      /** The user_id hashed id */
      user_id?: string;
      /** The client_id hashed id */
      client_id?: string;
      /** The Log Type ID */
      event_id?: number;
      /** The Category Type ID */
      category_id?: number;
      /** The Type Type ID */
      type_id?: number;
      /** The json object of the error */
      log?: { [key: string]: unknown };
      /** ______ */
      updated_at?: string;
      /** ______ */
      created_at?: string;
    };
    Task: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      /** ________ */
      invoice_id?: string;
      /** ________ */
      project_id?: string;
      /** ________ */
      number?: string;
      /** ________ */
      time_log?: string;
      /** ________ */
      is_running?: boolean;
      /** ________ */
      is_deleted?: boolean;
      /** ________ */
      task_status_id?: string;
      /** ________ */
      description?: string;
      /** ________ */
      duration?: number;
      /** ________ */
      task_status_order?: number;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
    };
    TaskStatus: {
      /** The task status name */
      name?: string;
      /** Timestamp */
      created_at?: number;
      /** ______ */
      is_deleted?: boolean;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      archived_at?: number;
    };
    TaxRate: {
      /** ______ */
      id?: string;
      /** ______ */
      name?: string;
      /** ______ */
      rate?: number;
      /** ______ */
      is_deleted?: boolean;
    };
    Template: {
      /** The template HTML */
      html?: string;
    };
    User: {
      /** __________ */
      id?: string;
      /** ________ */
      first_name?: string;
      /** _________ */
      last_name?: string;
      /** _________ */
      email?: string;
      /** _________ */
      phone?: string;
      /** _________ */
      signature?: string;
      /** _________ */
      avatar?: string;
      /** _________ */
      accepted_terms_version?: string;
      /** _________ */
      oauth_user_id?: string;
      /** _________ */
      oauth_provider_id?: string;
    };
    ValidationError: {
      /** The error message */
      message?: string;
      errors?: {
        value?: string[];
      };
    };
    VendorContact: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      vendor_id?: string;
      /** ________ */
      first_name?: string;
      /** ________ */
      last_name?: string;
      /** ________ */
      phone?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      email?: string;
      /** ________ */
      is_primary?: boolean;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      /** Timestamp */
      deleted_at?: number;
    };
    Vendor: {
      /** _________ */
      id?: string;
      /** __________ */
      user_id?: string;
      /** __________ */
      assigned_user_id?: string;
      /** ________ */
      company_id?: string;
      /** ________ */
      client_id?: string;
      contacts?: components["schemas"]["VendorContact"][];
      /** ________ */
      name?: string;
      /** ________ */
      website?: string;
      /** ________ */
      private_notes?: string;
      /** ________ */
      industry_id?: string;
      /** ________ */
      size_id?: string;
      /** ________ */
      address1?: string;
      /** ________ */
      address2?: string;
      /** ________ */
      city?: string;
      /** ________ */
      state?: string;
      /** ________ */
      postal_code?: string;
      /** The client phone number */
      work_phone?: string;
      /** ________ */
      country_id?: string;
      /** ________ */
      currency_id?: string;
      /** ________ */
      custom_value1?: string;
      /** ________ */
      custom_value2?: string;
      /** ________ */
      custom_value3?: string;
      /** ________ */
      custom_value4?: string;
      /** ________ */
      vat_number?: string;
      /** ________ */
      id_number?: string;
      /** ________ */
      number?: string;
      /** ________ */
      is_deleted?: boolean;
      /** Timestamp */
      last_login?: number;
      /** Timestamp */
      created_at?: number;
      /** Timestamp */
      updated_at?: number;
      settings?: components["schemas"]["CompanySettings"];
    };
    Webhook: {
      /** The subscription hashed id */
      id?: string;
      /** The subscription event id */
      event_id?: string;
      /** The api endpoint */
      target_url?: string;
      /** JSON or UBL */
      format?: string;
    };
  };
  parameters: {
    /** The API secret as defined by the .env variable API_SECRET */
    "X-Api-Secret": string;
    /** Used to send the XMLHttpRequest header */
    "X-Requested-With": string;
    /** The API token to be used for authentication */
    "X-Api-Token": string;
    /** The login password when challenged */
    "X-Api-Password": string;
    /** Includes child relationships in the response, format is comma separated */
    include: string;
    /** Returns static variables */
    include_static: string;
    /** Clears the static cache */
    clear_cache: string;
    /** Replaces the default response index from data to a user specific string */
    index: string;
    /** The API version */
    api_version: number;
  };
  headers: {
    /** The API version */
    "X-MINIMUM-CLIENT-VERSION"?: number;
    /** The number of requests left for the time window. */
    "X-RateLimit-Remaining"?: number;
    /** The total number of requests in a given time window. */
    "X-RateLimit-Limit"?: number;
  };
}

export interface operations {
  /** Attempts a new account signup and returns a CompanyUser object on success */
  postSignup: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** A custom name for the user company token */
        token_name: string;
      };
    };
    responses: {
      /** The Company User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyUser"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Signup credentials */
    requestBody: {
      content: {
        "application/json": {
          /** The user email address */
          email?: string;
          /** The signup users first name */
          first_name?: string;
          /** The signup users last name */
          last_name?: string;
          /** The user accepted the terms of service */
          terms_of_service?: boolean;
          /** The user accepted the privacy policy */
          privacy_policy?: boolean;
          /** The user password must meet minimum criteria ~ >6 characters */
          password?: string;
        };
      };
    };
  };
  /** Lists all activities */
  getActivities: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
        /** The number of activities to return */
        rows?: number;
      };
    };
    responses: {
      /** A list of actvities */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Gets a PDF for the given activity */
  getActivityHistoricalEntityPdf: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The Activity Hashed ID */
        activity_id: string;
      };
    };
    responses: {
      /** PDF File */
      200: unknown;
      /** No file exists for the given record */
      404: unknown;
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a CompanyUser object on success */
  postLogin: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Returns static variables */
        include_static?: components["parameters"]["include_static"];
        /** Clears the static cache */
        clear_cache?: components["parameters"]["clear_cache"];
      };
    };
    responses: {
      /** The Company User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyUser"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": {
          /** The user email address */
          email?: string;
          /** The user password must meet minimum criteria ~ >6 characters */
          password?: string;
        };
      };
    };
  };
  /** Refreshes the dataset */
  refresh: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Returns static variables */
        include_static?: components["parameters"]["include_static"];
        /** Clears the static cache */
        clear_cache?: components["parameters"]["clear_cache"];
      };
    };
    responses: {
      /** The Company User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyUser"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists clients, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the clients, these are handled by the ClientFilters class which defines the methods available
   */
  getClients: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of clients */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Client Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the cl.ient object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Client Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Client Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Client Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getClientsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkClients: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Client User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a client */
  uploadClient: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Client Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists client_gateway_tokens, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the client_gateway_tokens, these are handled by the ClientGatewayTokenFilters class which defines the methods available
   */
  getClientGatewayTokens: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of client_gateway_tokens */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeClientGatewayToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showClientGatewayToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The ClientGatewayToken Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the cl.ient object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateClientGatewayToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The ClientGatewayToken Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteClientGatewayToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The ClientGatewayToken Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editClientGatewayToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The ClientGatewayToken Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getClientGatewayTokensCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ClientGatewayToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Return a PDF of the client statement */
  clientStatement: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Client"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Statment Options */
    requestBody: {
      content: {
        "application/json": {
          /** The start date of the statement period - format Y-m-d */
          start_date?: string;
          /** The start date of the statement period - format Y-m-d */
          end_date?: string;
          /** The hashed ID of the client */
          client_id?: string;
          /** Flag which determines if the payments table is shown */
          show_payments_table?: boolean;
          /** Flag which determines if the aging table is shown */
          show_aging_table?: boolean;
        };
      };
    };
  };
  /**
   * Lists companies, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the companies, these are handled by the CompanyFilters class which defines the methods available
   */
  getCompanies: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of companies */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an company to the system */
  storeCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getCompaniesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an company by id */
  showCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an company by id */
  updateCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an company by id */
  deleteCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an company by id */
  editCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the uploading of a document to a company */
  uploadCompanies: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Sets the company as the default company. */
  setDefaultCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Company Hashed ID */
        company: string;
      };
    };
    responses: {
      /** Returns the company object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Company"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists company_gateways, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the company_gateways, these are handled by the CompanyGatewayFilters class which defines the methods available
   */
  getCompanyGateways: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of company_gateways */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an CompanyGateway to the system */
  storeCompanyGateway: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved CompanyGateway object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getCompanyGatewaysCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank CompanyGateway object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an CompanyGateway by id */
  showCompanyGateway: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The CompanyGateway Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the CompanyGateway object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an CompanyGateway by id */
  updateCompanyGateway: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The CompanyGateway Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the CompanyGateway object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an CompanyGateway by id */
  deleteCompanyGateway: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The CompanyGateway Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an CompanyGateway by id */
  editCompanyGateway: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The CompanyGateway Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the CompanyGateway object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkCompanyGateways: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Company Gateways response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyGateway"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Array of company gateway IDs */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Lists the company_ledger. */
  getCompanyLedger: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of company_ledger */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyLedger"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Attempts to update a company user record. A company user can modify only their settings fields. Full access for Admin users */
  updateCompanyUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** The Company User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyUser"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Refreshes the dataset */
  connected_account: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Returns static variables */
        include_static?: components["parameters"]["include_static"];
        /** Clears the static cache */
        clear_cache?: components["parameters"]["clear_cache"];
      };
    };
    responses: {
      /** The Company User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists credits, search and filters allow fine grained lists to be generated.
   *      *
   *      *      Query parameters can be added to performed more fine grained filtering of the credits, these are handled by the CreditFilters class which defines the methods available
   */
  getCredits: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of credits */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an credit to the system */
  storeCredit: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getCreditsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an credit by id */
  showCredit: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Credit Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an Credit by id */
  updateCredit: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Credit Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an credit by id */
  deleteCredit: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Credit Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an credit by id */
  editCredit: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkCredits: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Bulk Action response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a credit */
  uploadCredits: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Credit Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists designs */
  getDesigns: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of designs */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an design to a company */
  storeDesign: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved design object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a design by id */
  showDesign: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Design Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the expense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a design by id */
  updateDesign: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Design Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the design object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a design by id */
  deleteDesign: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Design Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a design by id */
  editDesign: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Design Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the design object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getDesignsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank design object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkDesigns: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Design User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Design"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Lists documents, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the documents, these are handled by the DocumentsFilters class which defines the methods available
   */
  getDocuments: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of documents */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Document"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Sends an email for an entity */
  sendEmailTemplate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** success */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Template"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The template subject and body */
    requestBody: {
      content: {
        "application/json": {
          /** The email subject */
          subject?: string;
          /** The email body */
          body?: string;
          /** The entity name */
          entity?: string;
          /** The entity_id */
          entity_id?: string;
          /** The template required */
          template?: string;
        };
      };
    };
  };
  /** Lists tax rates */
  getExpenseCategorys: {
    parameters: {
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of expense_categories */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getExpenseCategoryCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** A blank Expens Category object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an ExpenseCategory by id */
  showExpenseCategory: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The ExpenseCategory Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Expens Category object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a tax rate by id */
  updateExpenseCategory: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The ExpenseCategory Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the ExpenseCategory object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an ExpenseCategory by id */
  deleteExpenseCategory: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The ExpenseCategory Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a Expens Category by id */
  editExpenseCategory: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The ExpenseCategory Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Expens Category object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ExpenseCategory"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkExpenseCategorys: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The ExpenseCategory List response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Expens Categorys */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Lists expenses, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the expenses, these are handled by the ExpenseFilters class which defines the methods available
   */
  getExpenses: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of expenses */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Expense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the expense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Expense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Expense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Expense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getExpensesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkExpenses: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Expense User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a expense */
  uploadExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Expense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Expense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Export data from the system */
  getExport: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** success */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists group_settings, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the group_settings, these are handled by the GroupSettingFilters class which defines the methods available
   */
  getGroupSettings: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of group_settings */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an GroupSetting to the system */
  storeGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved GroupSetting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getGroupSettingsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank GroupSetting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an GroupSetting by id */
  showGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The GroupSetting Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the GroupSetting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an GroupSetting by id */
  updateGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The GroupSetting Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the GroupSetting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an GroupSetting by id */
  deleteGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The GroupSetting Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an GroupSetting by id */
  editGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The GroupSetting Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the GroupSetting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GroupSetting"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkGroupSettings: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Bulk Action response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** An array of group_settings ids */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a group setting */
  uploadGroupSetting: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Group Setting Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Group Setting object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Pre Import checks - returns a reference to the job and the headers of the CSV */
  preimport: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns a reference to the file */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The CSV file */
    requestBody: {
      content: {
        "multipart/form-data": string;
      };
    };
  };
  /** Import data from the system */
  getImportJson: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** success */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists invoices, search and filters allow fine grained lists to be generated.
   *      *
   *      *		Query parameters can be added to performed more fine grained filtering of the invoices, these are handled by the InvoiceFilters class which defines the methods available
   */
  getInvoices: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of invoices */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an invoice to the system */
  storeInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FillableInvoice"];
      };
    };
  };
  /** Returns a blank object with default values */
  getInvoicesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an invoice by id */
  showInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an invoice by id */
  updateInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an invoice by id */
  deleteInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an invoice by id */
  editInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkInvoices: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Bulk Action response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Performs a custom action on an invoice.
   *      *
   *      *        The current range of actions are as follows
   *      *        - clone_to_invoice
   *      *        - clone_to_quote
   *      *        - history
   *      *        - delivery_note
   *      *        - mark_paid
   *      *        - download
   *      *        - archive
   *      *        - delete
   *      *        - email
   */
  actionInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
        /** The action string to be performed */
        action: string;
      };
    };
    responses: {
      /** Returns the invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Downloads a specific invoice */
  downloadInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Invitation Key */
        invitation_key: string;
      };
    };
    responses: {
      /** Returns the invoice pdf */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Downloads a specific invoice delivery notes */
  deliveryNote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hahsed Id */
        id: string;
      };
    };
    responses: {
      /** Returns the invoice delivery note pdf */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the uploading of a document to a invoice */
  uploadInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Invoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Attempts to claim a white label license */
  getClaimLicense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** The license hash */
        license_key: string;
        /** The ID of the product purchased. */
        product_id: string;
      };
    };
    responses: {
      /** Success! */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists all logout */
  getLogout: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** Success message */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Attempts to purge a company record and all its child records */
  postPurgeCompany: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The Company Hashed ID */
        company: string;
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Attempts to purge a companies child records but save the company record and its settings */
  postPurgeCompanySaveSettings: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The Company Hashed ID */
        company: string;
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Starts the migration from previous version of Invoice Ninja */
  postStartMigration: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
        /** The login password when challenged */
        "X-Api-Password": components["parameters"]["X-Api-Password"];
      };
      query: {
        /** The migraton file */
        migration: { [key: string]: unknown };
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Attempts to create a one time token */
  oneTimeToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** The Company User response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists payments, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the payments, these are handled by the PaymentFilters class which defines the methods available
   */
  getPayments: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of payments */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an Payment to the system */
  storePayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The payment request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Payment"];
      };
    };
  };
  /** Returns a blank object with default values */
  getPaymentsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Payment by id */
  showPayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an Payment by id */
  updatePayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an Payment by id */
  deletePayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Payment by id */
  editPayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkPayments: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Payment response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Performs a custom action on an Payment.
   *
   *     The current range of actions are as follows
   *     - clone_to_Payment
   *     - clone_to_quote
   *     - history
   *     - delivery_note
   *     - mark_paid
   *     - download
   *     - archive
   *     - delete
   *     - email
   */
  actionPayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
        /** The action string to be performed */
        action: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an Refund to the system */
  storeRefund: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The refund request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Payment"];
      };
    };
  };
  /** Handles the uploading of a document to a payment */
  uploadPayment: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists payment terms */
  getPaymentTerms: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of payment terms */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds a Payment Term to the system */
  storePaymentTerm: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The payment_terms request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentTerm"];
      };
    };
  };
  /** Returns a blank object with default values */
  getPaymentTermsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank PaymentTerm object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Payment Term by id */
  showPaymentTerm: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Term Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment Term object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an Payment Termby id */
  updatePaymentTerm: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Term Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment Term object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an PaymentTerm by id */
  deletePaymentTerm: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Term Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Payment Term by id */
  editPaymentTerms: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Payment Term Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Payment object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkPaymentTerms: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Payment Terms response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PaymentTerm"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Payment Ter,s */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Attempts to ping the API */
  getPing: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** The company and user name */
      200: unknown;
    };
  };
  /** Attempts to get a health check from the API */
  getHealthCheck: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** A key/value map of the system health */
      200: unknown;
    };
  };
  /** Adds an credit to the system */
  postmarkWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved credit object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a pdf preview. */
  getPreview: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** The pdf response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists products, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the products, these are handled by the ProductFilters class which defines the methods available
   */
  getProducts: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of products */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an Product to the system */
  storeProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getProductsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Product by id */
  showProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Product Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an Product by id */
  updateProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Product Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an Product by id */
  deleteProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Product Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Product by id */
  editProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Product Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkProducts: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Product response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Hashed IDs */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a product */
  uploadProduct: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Product Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Product object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists projects */
  getProjects: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of projects */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an project to a company */
  storeProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved project object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a project by id */
  showProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Project Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the expense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a project by id */
  updateProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Project Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the project object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a project by id */
  deleteProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Project Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a project by id */
  editProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Project Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the project object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getProjectsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank project object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkProjects: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Project User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a project */
  uploadProject: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Project Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Project object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists quotes, search and filters allow fine grained lists to be generated.
   *      *
   *      *      Query parameters can be added to performed more fine grained filtering of the quotes, these are handled by the QuoteFilters class which defines the methods available
   */
  getQuotes: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of quotes */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an Quote to the system */
  storeQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getQuotesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Quote by id */
  showQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an Quote by id */
  updateQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an Quote by id */
  deleteQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an Quote by id */
  editQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkQuotes: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Quote response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Hashed ids */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Performs a custom action on an Quote.
   *
   *     The current range of actions are as follows
   *     - clone_to_quote
   *     - history
   *     - delivery_note
   *     - mark_paid
   *     - download
   *     - archive
   *     - delete
   *     - convert
   *     - convert_to_invoice
   *     - email
   */
  actionQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
        /** The action string to be performed */
        action: string;
      };
    };
    responses: {
      /** Returns the Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the uploading of a document to a quote */
  uploadQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Quote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Quote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists recurring_expenses, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the recurring_expenses, these are handled by the RecurringExpenseFilters class which defines the methods available
   */
  getRecurringExpenses: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of recurring_expenses */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringExpense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the recurring_expense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringExpense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringExpense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringExpense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getRecurringExpensesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkRecurringExpenses: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The RecurringExpense User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a recurring_expense */
  uploadRecurringExpense: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringExpense Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringExpense object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringExpense"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists recurring_invoices, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the recurring_invoices, these are handled by the RecurringInvoiceFilters class which defines the methods available
   */
  getRecurringInvoices: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of recurring_invoices */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an RecurringInvoice to the system */
  storeRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getRecurringInvoicesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an RecurringInvoice by id */
  showRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an RecurringInvoice by id */
  updateRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an RecurringInvoice by id */
  deleteRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an RecurringInvoice by id */
  editRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Downloads a specific invoice */
  downloadRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Recurring Invoice Invitation Key */
        invitation_key: string;
      };
    };
    responses: {
      /** Returns the recurring invoice pdf */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkRecurringInvoices: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The RecurringInvoice response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Hashed IDs */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Performs a custom action on an RecurringInvoice.
   *
   *     The current range of actions are as follows
   *     - clone_to_RecurringInvoice
   *     - clone_to_quote
   *     - history
   *     - delivery_note
   *     - mark_paid
   *     - download
   *     - archive
   *     - delete
   *     - email
   */
  actionRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
        /** The action string to be performed */
        action: string;
      };
    };
    responses: {
      /** Returns the RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the uploading of a document to a recurring_invoice */
  uploadRecurringInvoice: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringInvoice Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringInvoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringInvoice"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists recurring_quotes, search and filters allow fine grained lists to be generated.
   *
   *         Query parameters can be added to performed more fine grained filtering of the recurring_quotes, these are handled by the RecurringQuoteFilters class which defines the methods available
   */
  getRecurringQuotes: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of recurring_quotes */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an RecurringQuote to the system */
  storeRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getRecurringQuotesCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an RecurringQuote by id */
  showRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringQuote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an RecurringQuote by id */
  updateRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringQuote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an RecurringQuote by id */
  deleteRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringQuote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an RecurringQuote by id */
  editRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringQuote Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkRecurringQuotes: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The RecurringQuote response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Hashed ids */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Performs a custom action on an RecurringQuote.
   *
   *     The current range of actions are as follows
   *     - clone_to_RecurringQuote
   *     - clone_to_quote
   *     - history
   *     - delivery_note
   *     - mark_paid
   *     - download
   *     - archive
   *     - delete
   *     - email
   */
  actionRecurringQuote: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The RecurringQuote Hashed ID */
        id: string;
        /** The action string to be performed */
        action: string;
      };
    };
    responses: {
      /** Returns the RecurringQuote object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RecurringQuote"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Performs a system update */
  selfUpdate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** The login password when challenged */
        "X-Api-Password": components["parameters"]["X-Api-Password"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Success/failure response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists subscriptions. */
  getSubscriptions: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of subscriptions */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an subscriptions to the system */
  storeSubscription: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved subscriptions object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getSubscriptionsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank subscriptions object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an subscriptions by id */
  showSubscription: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Subscription Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Subscription object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an subscriptions by id */
  updateSubscription: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Subscription Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the subscriptions object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an subscriptions by id */
  deleteSubscription: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Subscription Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an subscriptions by id */
  editSubscription: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Subscription Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the invoice object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkSubscriptions: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Subscription response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Allows a user to send a support message to the Invoice Ninja Team */
  supportMessage: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {};
        content: {
          "application/json": string[];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The message */
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  /**
   * Lists system logs, search and filters allow fine grained lists to be generated.
   *      *
   *      *      Query parameters can be added to performed more fine grained filtering of the system logs, these are handled by the SystemLogFilters class which defines the methods available
   */
  getSystemLogs: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of system logs */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["SystemLog"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a system_logs by id */
  showSystemLogs: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The system_logs Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the system_logs object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["SystemLog"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists tasks, search and filters allow fine grained lists to be generated.
   *      *
   *      *   Query parameters can be added to performed more fine grained filtering of the tasks, these are handled by the TaskFilters class which defines the methods available
   */
  getTasks: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of tasks */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Task Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the task object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Task Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Task Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Task Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getTasksCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkTasks: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Task User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a task */
  uploadTask: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Task Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Task object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Sorts tasks after drag and drop on the KanBan. */
  sortTasks: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns an Ok, 200 HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lists task statuses */
  getTaskStatuses: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of task statuses */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds a TaskStatusto the system */
  storeTaskStatus: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved TaskStatus object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The task_status request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskStatus"];
      };
    };
  };
  /** Returns a blank object with default values */
  getTaskStatussCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank TaskStatus object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an TaskStatusby id */
  showTaskStatus: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The TaskStatusHashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the TaskStatusobject */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an TaskStatus Termby id */
  updateTaskStatus: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The TaskStatusHashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the TaskStatusobject */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an TaskStatus by id */
  deleteTaskStatus: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The TaskStatusHashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an TaskStatusby id */
  editTaskStatuss: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The TaskStatusHashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the TaskStatus object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkTaskStatuss: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The TaskStatus Terms response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskStatus"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** TaskStatus Ter,s */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Lists tax rates */
  getTaxRates: {
    parameters: {
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of tax_rates */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getTaxRateCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** A blank Tax Rate object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an TaxRate by id */
  showTaxRate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The TaxRate Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Tax Rate object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a tax rate by id */
  updateTaxRate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The TaxRate Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the TaxRate object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an TaxRate by id */
  deleteTaxRate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The TaxRate Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a Tax Rate by id */
  editTaxRate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      path: {
        /** The TaxRate Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Tax Rate object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkTaxRates: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The TaxRate List response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Tax Rates */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Returns a entity template with the template variables replaced with the Entities */
  getShowTemplate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** The template response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Template"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The template subject and body */
    requestBody: {
      content: {
        "application/json": {
          /** The email template subject */
          subject?: string;
          /** The email template body */
          body?: string;
        };
      };
    };
  };
  /**
   * Lists company tokens.
   *      *
   *      *   Query parameters can be added to performed more fine grained filtering of the tokens, these are handled by the TokenFilters class which defines the methods available
   */
  getTokens: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of tokens */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an token to a company */
  storeToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved token object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a token by id */
  showToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Token Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the token object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a token by id */
  updateToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Token Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the token object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a token by id */
  deleteToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Token Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a token by id */
  editToken: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Token Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the token object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getTokensCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank token object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkTokens: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Token response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompanyToken"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Token ids */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /**
   * Lists users, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the users, these are handled by the UserFilters class which defines the methods available
   */
  getUsers: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A list of users */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an User to the system */
  storeUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved User object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getUsersCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank User object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an User by id */
  showUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The User Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the User object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of an User by id */
  updateUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The User Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the User object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of an User by id */
  deleteUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Customized name for the Users API Token */
        token_name?: string;
      };
      path: {
        /** The User Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays an User by id */
  editUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The User Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the User object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkUsers: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Hashed ids */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Detach an existing user from a company */
  detachUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The user hashed_id */
        user: string;
      };
    };
    responses: {
      /** Success response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Reconfirm an existing user from a company */
  inviteUser: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The user hashed_id */
        user: string;
      };
    };
    responses: {
      /** Success response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Reconfirm an existing user from a company */
  inviteUserReconfirm: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The user hashed_id */
        user: string;
      };
    };
    responses: {
      /** Success response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists vendors, search and filters allow fine grained lists to be generated.
   *
   *     Query parameters can be added to performed more fine grained filtering of the vendors, these are handled by the VendorFilters class which defines the methods available
   */
  getVendors: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of vendors */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an client to a company */
  storeVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  showVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Vendor Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the vendor object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a client by id */
  updateVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Vendor Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a client by id */
  deleteVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Vendor Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a client by id */
  editVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Vendor Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getVendorsCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank client object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkVendors: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Vendor User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Handles the uploading of a document to a vendor */
  uploadVendor: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Vendor Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Vendor object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Vendor"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Executes the task scheduler via a webcron service */
  webcron: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
    };
    responses: {
      /** Success response */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists Webhooks, search and filters allow fine grained lists to be generated.
   *      *
   *      *      Query parameters can be added to performed more fine grained filtering of the Webhooks, these are handled by the WebhookFilters class which defines the methods available
   */
  getWebhooks: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** A list of Webhooks */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Adds an Webhook to a company */
  storeWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** Returns the saved Webhook object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a Webhook by id */
  showWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Webhook Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Webhook object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the updating of a Webhook by id */
  updateWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Webhook Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Webhook object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Handles the deletion of a Webhook by id */
  deleteWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Webhook Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns a HTTP status */
      200: unknown;
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Displays a Webhook by id */
  editWebhook: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
      path: {
        /** The Webhook Hashed ID */
        id: string;
      };
    };
    responses: {
      /** Returns the Webhook object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Returns a blank object with default values */
  getWebhooksCreate: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Includes child relationships in the response, format is comma separated */
        include?: components["parameters"]["include"];
      };
    };
    responses: {
      /** A blank Webhook object */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  bulkWebhooks: {
    parameters: {
      header: {
        /** The API secret as defined by the .env variable API_SECRET */
        "X-Api-Secret": components["parameters"]["X-Api-Secret"];
        /** The API token to be used for authentication */
        "X-Api-Token": components["parameters"]["X-Api-Token"];
        /** Used to send the XMLHttpRequest header */
        "X-Requested-With": components["parameters"]["X-Requested-With"];
      };
      query: {
        /** Replaces the default response index from data to a user specific string */
        index?: components["parameters"]["index"];
      };
    };
    responses: {
      /** The Webhook User response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
      /** Unexpected Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
}

export interface external {}
